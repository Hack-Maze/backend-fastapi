name: fast-CI

on: 
  workflow_dispatch:

  push: 
    branches:
      - 'main'
      - 'develop'
      - 'feature-**'
      - '!CI-**'
      - 'deploy'
      
    paths-ignore:    
        - '*.md'
        - 'docker-compose.yml'
        - '.github/workflows/*'
  pull_request:
    branches:
      - 'main'
      - 'develop'
      - 'feature-**'
      - '!CI-**'
      - 'deploy'
      
    paths-ignore:    
        - '*.md'
        - 'docker-compose.yml'
        - '.github/workflows/*'



jobs:


  notify_Discord:
    if: ${{ github.actor != 'dependabot[bot]' && !contains(github.event.head_commit.message, 'dependabot') }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - name: notify Backend CI Workflow started
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          color: '#7851A9'
          details: "## > - **Backtend CI Workflow started!**"
          footer: HORRAI.
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}


#####################################################################################


  build-test:
    runs-on: ubuntu-latest 
    needs: [notify_Discord]
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/app/
    steps:

      - name: short-sha
        uses: benjlevesque/short-sha@v2.2
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
          


      - name: checkout
        uses: actions/checkout@v4
    

      - name: Set up Python 3.8
        uses: actions/setup-python@v5 
        with:
          python-version: 3.8 # Modify python version HERE

      #Task for installing dependencies, multi-line command
      - name: Install dependencies
        run: |
         
          pip install --upgrade pip && pip3 install poetry && poetry install --no-root
          python -m pip install pytest
          # pip wheel --no-cache-dir --use-pep517 "uvloop (==0.17.0)"
          poetry install 

      # Task for testing with pytest
      # - name: Test with pytest
      #   run: |
      #     pytest


      - name: notify Backend  Build-test Stage Succeeded
        uses: rjstone/discord-webhook-notify@v1
        env:
          SHA: ${{ env.SHA }}
          
        
        if: success()
        with:
          severity: info
          details: "## > - **Build-test stage Succeeded**"
          footer: sha ${{ env.SHA }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}


            
      - name: Test Failure
        uses: rjstone/discord-webhook-notify@v1
        env:
          SHA: ${{ env.SHA }}
    
        if: failure()
        with:
          severity: error
          details: "## > - **Build-test stage Failed**"
          footer: sha ${{ env.SHA }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Test Cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
          severity: warn
          details: "## > - **Build-test stage Cancelled!**"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}




# #############################################################################


  lint:
    defaults:
      run:
        shell: bash

        working-directory: ${{ github.workspace }}

            
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:    
      - name: short-sha
        uses: benjlevesque/short-sha@v2.2
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}


      - uses: actions/checkout@v4
        name: 'Checkout repository'


      ##############################
      # Run Linter against code base #
      ################################
      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_ERRORS: true

          FILTER_REGEX_INCLUDE: '.^app/*'


      - name: notify Backend  lint Stage Succeeded
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
            severity: info
            details: "## > - **Lint stage Succeeded** "
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}
            
      - name: Test Failure
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
            severity: error
            details: "## > - **Lint stage Failed**"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}
          
      - name: Test Cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
            severity: warn
            details: "## > - **Lint Cancelled!**"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}

############################################################################
          
  analyze-codeQL:
    name: Analyze code
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/app/

    needs: [build-test]
    permissions:
      actions: read
      contents: read
      security-events: write
      

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]

    steps:
    
    - name: short-sha
      uses: benjlevesque/short-sha@v2.2
      env:
        SHA: ${{ steps.short-sha.outputs.sha }}
        
  


    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2


    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

      

    - name: notify analyze-codeQL Stage Succeeded
      uses: rjstone/discord-webhook-notify@v1
      if: success()
      with:
          severity: info
          details: "##  > - **Analyze-codeQL stage Succeeded**"
          footer: sha ${{ env.SHA }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
      env:
        SHA: ${{ env.SHA }}
    - name: Test Failure
      uses: rjstone/discord-webhook-notify@v1
      if: failure()
      with:
          severity: error
          details: "##  > - **Analyze-codeQL stage Failed**"
          footer: sha ${{ env.SHA }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
      env:
        SHA: ${{ env.SHA }}
    - name: Test Cancelled
      uses: rjstone/discord-webhook-notify@v1
      if: cancelled()
      with:
          severity: warn
          details: "##  > - **Analyze-codeQL Cancelled!**"
          footer: sha ${{ env.SHA }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
      env:
          SHA: ${{ env.SHA }}

############################################################################

  analyze-codacy:
      needs: [build-test]
      defaults:
        run:
          shell: bash 
          working-directory: ${{ github.workspace }}/app/

      permissions:
        contents: read # for actions/checkout to fetch code
        security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
        actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      name: Codacy Security Scan
      runs-on: ubuntu-latest
      steps:

        - name: short-sha
          uses: benjlevesque/short-sha@v2.2
          env:
            SHA: ${{ steps.short-sha.outputs.sha }}
            
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout code
          uses: actions/checkout@v3
  
        # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
        - name: Run Codacy Analysis CLI
          uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
          with:
            # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
            # You can also omit the token and run the tools that support default configurations
            project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
            verbose: true
            output: results.sarif
            format: sarif
            # Adjust severity of non-security issues
            gh-code-scanning-compat: true
            # Force 0 exit code to allow SARIF file generation
            # This will handover control about PR rejection to the GitHub side
            max-allowed-issues: 2147483647
  
        # Upload the SARIF file generated in the previous step
        - name: Upload SARIF results file
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: results.sarif

        - name: notify analyze-codacy Stage Succeeded
          uses: rjstone/discord-webhook-notify@v1
          if: success()
          with:
              severity: info
              details: "##  > - **Analyze-codacy stage Succeeded**"
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}
        - name: Test Failure
          uses: rjstone/discord-webhook-notify@v1
          if: failure()
          with:
              severity: error
              details: "##  > - **Analyze-codacy stage Failed**"
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}
        - name: Test Cancelled
          uses: rjstone/discord-webhook-notify@v1
          if: cancelled()
          with:
              severity: warn
              details: "##  > - **Analyze-codacy Cancelled!**"
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
              SHA: ${{ env.SHA }}
            
 
############################################################################          
                   


  Trivy-scan:
    if: github.actor!= 'dependabot[bot]'
    needs: [build-test]
    defaults:
      run:
        shell: bash 
        working-directory: ${{ github.workspace }}
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Trivy analysis
    runs-on: "ubuntu-22.04"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image from Dockerfile
        run: |
          docker build -t docker.io/mostafaewida/hackmaze_backend:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'docker.io/mostafaewida/hackmaze_backend:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'


# ########################################################################################################


  push_to_Docker_Hub:
    
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

        working-directory: ${{ github.workspace }}/app


    needs: [Trivy-scan,analyze-codeQL,analyze-codacy,lint]
    steps:
      - name: short-sha
        uses: benjlevesque/short-sha@v2.2
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
          
              
      


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERUSERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Checkout repository
        uses: actions/checkout@v4


        
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.workspace }}

          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            ${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}:${{ env.SHA }}



  
      - name: Clean up Docker Tags
        run: |
          #!/bin/bash
          
          REPO_NAME=${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}  # Replace with your Docker repository name
          USER_NAME=${{ secrets.DOCKERUSERNAME }}
          # Get list of tags for the repository
          TAGS=$(curl -sS "https://hub.docker.com/v2/repositories/${REPO_NAME}/tags/?page_size=10000" | jq -r '.results|.[]|.name')
          
          # Retain the first three tags (most recent)
          KEEP_TAGS=$(echo "$TAGS" | head -n 3)
          
          echo "All Tags: $TAGS"
          echo "Retaining Tags: $KEEP_TAGS"
          
          TOKEN=${{ secrets.DOCKERHUB_TOKEN }} # Replace with your Docker Hub Personal Access Token
          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$USER_NAME\", \"password\": \"$TOKEN\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          
          # Loop through all tags, delete those not in the retained list
          for tag in $TAGS; do
          
              if [[  "$KEEP_TAGS" =~ "$tag" ]]; then
                  echo "keeping $tag"
                  
              else
                  
                  response=$(curl -i -X DELETE   -H "Accept: application/json"   -H "Authorization: JWT $HUB_TOKEN"   https://hub.docker.com/v2/repositories/$REPO_NAME/tags/$tag/)
                  echo "Deleted tag: $tag - Response: $response"
                  
              fi
          done



        

      - name: notify Push to Dockerhub Stage Succeeded
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
            severity: info
            details: "##  > - **Push to DockerHub stage Succeeded**"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}
            
      - name: Test Failure
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
            severity: error
            details: "##  > - **Push to DockerHub stage Failed**"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}
      - name: Test Cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
            severity: warn
            details: "##  > - **Push to DockerHub Cancelled!**"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}





#############################################################################

  deploy-azure:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]' && github.event_name == 'push' && github.ref == 'refs/heads/deploy'
    needs: [push_to_Docker_Hub]
    steps:
    
      - name: deploy to azure
        uses: benc-uk/workflow-dispatch@v1
        with:
          token: ${{ secrets.PAT_TOKEN }}
          workflow: terraform-apply.yml
          repo: Hack-Maze/IaC
          ref: main


  notify_Discord_CI_finish-deploy:
    if: github.actor!= 'dependabot[bot]'
    needs: [deploy-azure]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - name: notify Frontend CI Workflow finished
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
            severity: info
            color: '#7851A9'
            details: "## > - **Frontend CI Workflow Finished!**"
            footer: HORRAI.
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}


            
#############################################################################



  notify_Discord_CI_finish:
    if: github.actor!= 'dependabot[bot]'
    needs: [push_to_Docker_Hub]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
  
    steps:
      - name: notify backend CI Workflow finished
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
            severity: info
            color: '#7851A9'
            details: "## > - **backend CI Workflow Finished!**"
            footer: HORRAI.
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}

